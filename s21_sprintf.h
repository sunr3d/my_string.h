#ifndef S21_SPRINTF_H
#define S21_SPRINTF_H

#include <math.h>
#include <stdarg.h>
#include <stdlib.h>
#include <wchar.h>

#include "s21_string.h"

#ifndef FALSE
#define FALSE 0
#endif

#ifndef TRUE
#define TRUE 1
#endif

// Структура для хранения кол-ва спецификаторов в строке формата и указатель на
// список спецификаторов
struct s21_format {
  int speccnt;  // Кол-во спецификаторов в строке формата
  int specssize;  // Максимальное кол-во спецификаторов (для динамической
                  // памяти)
  struct s21_spec** specs;  // Указатель на массив(список) спецификаторов
};

// Набор констант с типом спецификатора
enum s21_spec_type {
  TYPE_C,
  TYPE_D,
  TYPE_F,
  TYPE_S,
  TYPE_U,
  TYPE_LD,
  TYPE_LU,
  TYPE_HD,
  TYPE_HU,
  TYPE_LC,
  TYPE_LS
};

// Структура описания спецификатора
struct s21_spec {
  enum s21_spec_type type;
  int pos_start;  // позиция спецификатора в тексте
  int pos_end;
  char flag;  // -, +, ( )
  int min_w;
  int min_w_set;  // был ли задан min_w
  int accuracy;
  int accuracy_set;  // был ли задан accuracy
  int h;
  int l;
  int fill_0;
};

struct s21_parser {
  int end;
  int w;
  int accur;
  int point;
  int w_set;
  int accur_set;
  int first_num;
};

/* Функции чтения и парсинга строки формата и вспомогательные к ним */
/// @brief Функция для чтения формата.
/// @param format  указатель на строку, содержащую формат.
/// @param parsed_format указатель на структуру, в которую будет записан
/// разобранный формат.
/// @return Количество спецификаторов в строке формата.
int read_format(const char* format, struct s21_format* parsed_format);

/// @brief Подфункция для парсинга строки формата
/// @param format указатель на строку формата
/// @param spec указатель на структуру описывающую спецификаторы
/// @param i указатель на индекс в строке формата
/// @param c указатель на текущее значение символа в строке формата
void parse_format(const char* format, struct s21_spec* spec, int* i, char* c);

/// @brief Вспомогательная функция обработки цифры в строке формата
/// @param spec указатель на структуру описывающую спецификатор
/// @param c указатель на текущее значение символа в строке формата
/// @param parser указатель на структуру с данными для парсерса
void case_number(struct s21_spec* spec, char* c, struct s21_parser* parser);

/// @brief Всопомгательная функция, устанавливает ширину и точность для
/// спецификатора в структуре spec
/// @param spec указатель на структуру описывающую спецификатор
/// @param parser указатель на сутркутуру с данными для парсера
void set_width_accuracy(struct s21_spec* spec, struct s21_parser* parser);

/* Функция для печати спецификатора в строку + вспомогательные к ней */
/// @brief Функция для печати спецификатора в строку.
/// @param str указатель на строку, в которую будет записан результат.
/// @param factor указатель на список аргументов в s21_sprintf.
/// @param spec указатель на структуру описывающую спецификаторы.
/// @param current_output_pos указатель на текущую позицию в строке (так же
/// счетчик символов в строке)
void print_spec(char* str, va_list* factor, struct s21_spec* spec,
                int* current_output_pos);

/// @brief Вспомогательная функция для печати символа в строку
/// @param str указатель на строку, в которую будет записан символ.
/// @param current_output_pos указатель на текущую позицию в строке (так же
/// счетчик символов в строке)
/// @param c символ для печати в строку
void print_c(char* str, int* current_output_pos, char c);

/// @brief Вспомогательная функция для печати расширенного символа в строку
/// @param str указатель на строку, в которую будет записан символ.
/// @param current_output_pos указатель на текущую позицию в строке (так же
/// счетчик символов в строке)
/// @param c широкий символ для печати в строку
void print_lc(char* str, int* current_output_pos, wchar_t c);

/// @brief Вспомогательная функция для печати целого числа в строку
/// @param str указатель на строку, в которую будет записано целое число
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строку (он же
/// счетчик символо в строке)
/// @param d целое число для печати в строку
void print_d(char* str, struct s21_spec* spec, int* current_output_pos, int d);

/// @brief Вспомогательная функция для печати большого целого числа в строку
/// @param str указатель на строку, в которую будет записано целое число
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строку (он же
/// счетчик символо в строке)
/// @param d большое целое число для печати в строку
void print_ld(char* str, struct s21_spec* spec, int* current_output_pos,
              long d);

/// @brief Вспомогательная функция для печати строки в строку
/// @param str указатель на строку, в которую будет записана строка
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строку (он же
/// счетчик символо в строке)
/// @param s строка для печати
void print_s(char* str, struct s21_spec* spec, int* current_output_pos,
             char* s);

/// @brief Вспомогательная функция для печати широкой строки в строку
/// @param str указатель на строку, в которую будет записана строка
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строку (он же
/// счетчик символо в строке)
/// @param s широкая строка для печати
void print_ls(char* str, struct s21_spec* spec, int* current_output_pos,
              wchar_t* s);

/// @brief Вспомогательная функция для печати беззнакового целого числа в строку
/// @param str указатель на строку, в которую будет записано беззнаковое целое
/// число
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строку (он же
/// счетчик символо в строке)
/// @param u беззнаковое целое число для печати
void print_u(char* str, struct s21_spec* spec, int* current_output_pos,
             unsigned int u);

/// @brief Вспомогательная функция для печати большого беззнакового целого числа
/// в строку
/// @param str указатель на строку, в которую будет записано беззнаковое целое
/// число
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строку (он же
/// счетчик символо в строке)
/// @param u большое беззнаковое целое число для печати
void print_lu(char* str, struct s21_spec* spec, int* current_output_pos,
              unsigned long u);

/// @brief Вспомогательная функция для печати числа с плавающей точкой в строку
/// (float)
/// @param str указатель на строку, в которую будет записан результат
/// @param spec указатель на структуру описывающую спецификатор
/// @param current_output_pos указатель на текущую позицию в строке (он же
/// счетчик символов в строке)
/// @param f число с плавающей точкой для печати
void print_f(char* str, struct s21_spec* spec, int* current_output_pos,
             double f);

/* Вспомогательные функции для структуры описывающей формат */
/// @brief Вспомогательная функция для установки типа спецификатора
/// @param s_spec указатель на структуру описывающую спецификатор
/// @param c символ, обозначающий тип спецификатора
void spec_set_type(struct s21_spec* s_spec, char c);

/// @brief Вспомогательная функция для установки флага спецификатора
/// @param s_spec указатель на структуру описывающую спецификатор
/// @param c символ, обозначающий флаг спецификатора
void spec_set_flag(struct s21_spec* s_spec, char c);

/// @brief Вспомогательная функция для установки флага заполнения нулями
/// @param s_spec указатель на структуру описывающую спецификатор
void spec_set_fill_0(struct s21_spec* s_spec);

/// @brief Вспомогательная функция для установки ширины спецификатора
/// @param s_spec указатель на структуру описывающую спецификатор
/// @param width ширина спецификатора
void spec_set_w(struct s21_spec* s_spec, int width);

/// @brief Вспомогательная функция для установки точности спецификатора
/// @param s_spec указатель на структуру описывающую спецификатор
/// @param accuracy точность спецификатора
void spec_set_accur(struct s21_spec* s_spec, int accuracy);

/* Вспомогательные функции для преобразования чисел в буфер строку и обработки
 * ширины */
/// @brief Вспомогательная функция округления числа до заданного кол-ва
/// десятичных знаков
/// @param value число для округления
/// @param decimal_places количество десятичных знаков
/// @return Округленное число
double round_to_decimal_places(double value, int decimal_places);

/// @brief Вспомогательная функция для конвертации беззнакового целого числа в
/// буфер строку
/// @param c указатель на буфер строку, в которую будет записан результат
/// @param d большое беззнаковое целое число для преобразования
/// @return Кол-во цифр в числе
int uint_to_chars(char* c, unsigned int d);

/// @brief Вспомогательная функция для конвертации большого беззнакового целого
/// числа в буфер строку
/// @param c указатель на буфер строку, в которую будет записан результат
/// @param d большое беззнаковое целое число для преобразования
/// @return Кол-во цифр в числе
int ulong_to_chars(char* c, unsigned long d);

/// @brief Вспомогательная функция преобразования дробной части числа в буфер
/// строку
/// @param c указатель на буфер строку, в которую будет записан результат
/// @param f число с плавающей точкой для парсинга
/// @param spec указатель на структуру описывающую спецификатор
/// @return Количество цифр дробной части числа
int fract_to_chars(char* c, double f, struct s21_spec* spec);

/// @brief Вспомогательная функция печати беззнакового целого числа из буфера в
/// строку, с поднастройкой в зависимости от описания спецификатора
/// @param from указатель на буфер, содержащий символы числа
/// @param to указатель на строку, в которую будет скопировано число
/// @param current_output_pos указатель на текущую позицию в строке (он же
/// счетчик символов в строке)
/// @param spec указатель на структуру описывающую спецификатор
/// @param count количество цифр в числе
/// @param minus флаг отрицательности числа (TRUE, FALSE)
void print_uint_chars(char* from, char* to, int* current_output_pos,
                      struct s21_spec* spec, int count, int minus);

/// @brief Вспомогательная функция для заполнения минимальной ширины ('0' или
/// (space))
/// @param str указатель на строку, в которую будет записан результат
/// @param current_output_pos указатель на текущую позицию в строке (он же
/// счетчик символов в строке)
/// @param spec указатель на структуру описывающую спецификатор
/// @param count количество цифр в числе
void fill_min_width(char* str, int* current_output_pos, struct s21_spec* spec,
                    int count);

/* Вспомогательные функции с работой динамической памяти под структуры формата и
 * описания спецификатора */
/// @brief Вспомогательная функция динамической инициализации структуры формата
/// @return Указатель на инициализированную структуру формата
struct s21_format* format_init();

/// @brief Вспомогательная функция динамической инициализации структуры описания
/// спецификатора
/// @return Указатель на инициализированную структуру описания спецификатора
struct s21_spec* spec_init(int pos_start);

/// @brief Функция добавления описания спецификатора в структуру формата
/// @param format указатель на структуру формата куда добавляем описание
/// спецификатора
/// @param spec указатель на структуру описания спецификатора для добавления
void format_addspec(struct s21_format* format, struct s21_spec* spec);

/// @brief Функция динамически инициализирует структуру парсера
/// @return Указатель на инициализированную структуру парсера
struct s21_parser* parser_init();

/// @brief Функция высвобождения динамической памяти из-под структур
/// @param format указатель на структуру формата для очистки
void format_free(struct s21_format* format);

#endif  // S21_SPRINTF_H