#ifndef S21_STRING_H
#define S21_STRING_H

#include <stdlib.h>

#define s21_NULL ((void*)0)

typedef unsigned long s21_size_t;

/// @brief Ищет в памяти первое вхождение символа c в строке str
/// @param str указатель на кусок памяти в котором ищем символ
/// @param c символ, который нужно искать
/// @param n количество "ячеек" для проверки
/// @return Указатель на первую ячейку где был найден символ в памяти, или NULL,
/// если символ не найден
void* s21_memchr(const void* str, int c, s21_size_t n);

/// @brief Функция сранивает первые n байт памяти str1 и str2
/// @param str1 указатель на первый кусок памяти
/// @param str2 указатель на второй кусок памяти
/// @param n количество "ячеек" для проверки
/// @return 0, если первые n байт совпадают; Отрицательное, если первые n байт
/// str1 < str2; Положительное, если первые n байт str1 > str2
int s21_memcmp(const void* str1, const void* str2, s21_size_t n);

/// @brief Функция копирует n байт из памяти src в память dest (перезапись)
/// @param dest указатель на память, в которую нужно скопировать
/// @param src указатель на память, из которой будем копировать
/// @param n количество "ячеек" для копирования
/// @return Указатель на первую ячейку памяти dest
void* s21_memcpy(void* dest, const void* src, s21_size_t n);

/// @brief Функция заполняет первые n байт памяти str значением c
/// @param str указатель на память, которую нужно заполнить
/// @param c значение, которым нужно заполнить память
/// @param n кол-во "ячеек" для заполнения
/// @return Указатель на первую ячейку памяти str
void* s21_memset(void* str, int c, s21_size_t n);

// Дополняет строку dest из строки src в размере n байт
/// @brief Функция добавляет первые n символов строки src в конец строки dest
/// @param dest указатель на строку, в которую будет добавлена строка src
/// @param src указатель на строку, которуб добавим к dest
/// @param n кол-во символов, которые нужно добавить
/// @return Указатель на строку dest
char* s21_strncat(char* dest, const char* src, s21_size_t n);

/// @brief Функция ищет в строке str первое появление символа c
/// @param str указатель на строку, в которой производим поиск
/// @param c символ для поиска
/// @return Указатель на первую ячейку где был найден символ в строке, или NULL,
/// если символ не найден
char* s21_strchr(const char* str, int c);

/// @brief Функция сранивает первые n символов строки str1 и строки str2
/// @param str1 указатель на первую строку
/// @param str2 указатель на вторую строку
/// @param n количество символов для сравнения
/// @return 0, если первые n символов совпадают; Отрицательное, если первые n
/// символов str1 < str2; Положительное, если первые n символов str1 > str2
int s21_strncmp(const char* str1, const char* str2, s21_size_t n);

/// @brief Функция копирует первые n символов из строки src в строку dest
/// (перезапись)
/// @param dest указатель на строку, в которую копируем
/// @param src указатель на строку, из которой копируем
/// @param n количество символов для копирования
/// @return Указатель на строку dest
char* s21_strncpy(char* dest, const char* src, s21_size_t n);

/// @brief Функция вычисляет кол-во символов в строке str1 до первого вхождения
/// символа, который есть в строке str2
/// @param str1 указатель строка в которой ищем
/// @param str2 указатель на строку из которой берем символы
/// @return Количество символов в str1 до первого любого символа из строки str2
s21_size_t s21_strcspn(const char* str1, const char* str2);

/// @brief Функция возвращает указатель на строку с описанием ошибки по номеру
/// ошибки
/// @param errnum код ошибки
/// @return Указатель на строку с описанием ошибки
char* s21_strerror(int errnum);

/// @brief Функция вычисляет длину строки str (без терминатора)
/// @param str указатель на строку для которой вычисляем длину
/// @return Длина строки str типа s21_size_t
s21_size_t s21_strlen(const char* str);

/// @brief Функция ищет в строке str1 первое появление любого символа из строки
/// str2
/// @param str1 указатель на строку в которой ищем
/// @param str2 указатель на строку из которой берем символы
/// @return Указатель на первое появление символа в строке str1 из строки str2,
/// или NULL, если символ(ы) не найден(ы)
char* s21_strpbrk(const char* str1, const char* str2);

/// @brief Функция ищет в строке str ПОСЛЕДНЕЕ вхождение символа c
/// @param str указатель на строку в которой ищем
/// @param c символ для поиска
/// @return Указатель на ПОСЛЕДНЕЕ появление символа в строке str, или NULL,
/// если символ не найден
char* s21_strrchr(const char* str, int c);

/// @brief Функция ищет в строке haystack первое вхождение подстроки needle
/// @param haystack указатель на строку в которой ищем
/// @param needle указатель на подстроку, которую нужно найти
/// @return Указатель на первое вхождение подстроки needle в строке haystack,
/// или NULL, если подстрока не найдена
char* s21_strstr(const char* haystack, const char* needle);

/// @brief Функция разбивает строку str на токены, используя разделители из
/// строки delim (ВАЖНО: Функция изменяет начальную строку)
/// @param str указатель на строку для разбивки
/// @param delim указатель на строку с разделителями
/// @return Указатель на первый токен из строки str, или NULL если строка не
/// может быть разделена
char* s21_strtok(char* str, const char* delim);

/// @brief Функция печатает в строку str согласно строке формата format
/// @param str указатель на строку в которую печатаем
/// @param format указатель на строку с форматом
/// @param ... дополнительные аргументы для строки формата
/// @return Количество символов, напечатаных в строку str
int s21_sprintf(char* str, const char* format, ...);

/// @brief Функция преобразует все печатные символы строки str в ВЕРХНИЙ регистр
/// @param str указатель настроку для преобразования
/// @return Указатель на преобразованную строку, или NULL, если строка не может
/// быть преобразована
void* s21_to_upper(const char* str);

/// @brief Функция преобразует все печатные символы строки str в НИЖНИЙ регистр
/// @param str указатель настроку для преобразования
/// @return Указатель на преобразованную строку, или NULL, если строка не может
/// быть преобразована
void* s21_to_lower(const char* str);

/// @brief Функция вставляет строку str в строку src в позицию start_index
/// @param src указатель на строку в которую вставляем
/// @param str указатель на строку, которую вставляем
/// @param start_index индекс начала вставки в строку src
/// @return Указатель на преобразованную строку, или NULL, если вставка не
/// удалась
void* s21_insert(const char* src, const char* str, s21_size_t start_index);

/// @brief Функция удаляет из строки src символы, указанные в строке trim_chars
/// @param src указатель на строку из которой удаляем символы
/// @param trim_chars указатель на строку с символами для удаления
/// @return Указатель на преобразованную строку, или NULL, если удаление не
/// удалось
void* s21_trim(const char* src, const char* trim_chars);

#endif  // S21_STRING_H